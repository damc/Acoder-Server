# Extraction

Given code in a file, extract the code related to the given identifier. For example if the identifier is a method name, then write the declaration and the definition of that method. If the identifier doesn't exist in the given code, then just make an empty snippet.

### Extract

```
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Santa Claus</title>
</head>
<body>
    <h1>Santa Claus</h1>
    <p>
        Santa Claus is a man who flies around the world delivering presents to children.
    </p>
    <p>
        He is a jolly man with a big white beard.
    </p>
    <p id="north_pole">
        He lives in the North Pole.
    </p>
</body>
</html>
```

Identifier: north_pole

```
    <p id="north_pole">
        He lives in the North Pole.
    </p>
```

### Extract

```
<?php

namespace App\Controller\Front;

use App\Entity\User;
use App\Form\RegistrationFormType;
use App\Security\EmailVerifier;
use Symfony\Bridge\Twig\Mime\TemplatedEmail;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
use SymfonyCasts\Bundle\VerifyEmail\Exception\VerifyEmailExceptionInterface;

class RegistrationController extends AbstractController
{
    private $emailVerifier;

    public function __construct(EmailVerifier $emailVerifier)
    {
        $this->emailVerifier = $emailVerifier;
    }

    /**
     * @Route("/register", name="app_register")
     */
    public function register(Request $request, UserPasswordEncoderInterface $passwordEncoder): Response
    {
        $user = new User();
        $form = $this->createForm(RegistrationFormType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // encode the plain password
            $user->setPassword(
                $passwordEncoder->encodePassword(
                    $user,
                    $form->get('plainPassword')->getData()
                )
            );

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($user);
            $entityManager->flush();

            // generate a signed url and email it to the user
            $this->emailVerifier->sendEmailConfirmation('app_verify_email', $user,
                (new TemplatedEmail())
                    ->to($user->getEmail())
                    ->subject('Please Confirm your Email')
                    ->htmlTemplate('registration/confirmation_email.html.twig')
            );
            // do anything else you need here, like send an email

            return $this->redirectToRoute('app_register_success');
        }

        return $this->render('registration/register.html.twig', [
            'registrationForm' => $form->createView(),
        ]);
    }

    /**
     * @Route("/register/success", name="app_register_success")
     */
    public function registrationSuccessful()
    {
        return $this->render('registration/success.html.twig');
    }

    /**
     * @Route("/verify/email", name="app_verify_email")
     */
    public function verifyUserEmail(Request $request): Response
    {
        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');

        // validate email confirmation link, sets User::isVerified=true and persists
        try {
            $this->emailVerifier->handleEmailConfirmation($request, $this->getUser());
        } catch (VerifyEmailExceptionInterface $exception) {
            $this->addFlash('verify_email_error', $exception->getReason());

            return $this->redirectToRoute('app_register');
        }

        // @TODO Change the redirect on success and handle or remove the flash message in your templates
        $this->addFlash('success', 'Your email address has been verified.');

        return $this->redirectToRoute('app_register');
    }
}
```

Identifier: registrationSuccessful

```
    /**
     * @Route("/register/success", name="app_register_success")
     */
    public function registrationSuccessful()
    {
        return $this->render('registration/success.html.twig');
    }
```

### Extract

```
.columns {
    margin-top: 0;
}

/* Start nav drawer */
aside.column {
    padding: 0;
    box-shadow: 2px 0px 4px #888888;
}
.panel-heading, .panel-block {
    border: 0;
    border-radius: 0;
}
.panel-block {
    justify-content: center;
}
/*End nav drawer  */

section.column {
    padding: 2rem;
}
```

Identifier: .panel-heading

```
.panel-heading, .panel-block {
    border: 0;
    border-radius: 0;
}
```

### Extract

```
@login_manager.user_loader
def load_user(user_id):
    """Load user by ID."""
    return User.query.get(int(user_id))


@app.route('/')
def index():
    """Index page."""
    return render_template('index.html')
```

Identifier: register

```
```

### Extract

```
{{ code }}
```

Identifier: {{ identifier }}

```